/**
 * @packageDocumentation
 * @module api.functional.auth.sign_in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "nestia-fetcher";
import type { IConnection } from "nestia-fetcher";
import TSON from "typescript-json";

import type { IAuthUsecase } from "./../../../../../src/api/auth/application/port/auth.usecase.port";
import type { __object } from "./../../../../../src/api/auth/presentation/web/auth.controller";

/**
 * 사용자 로그인 API
 * 
 * @tag auth
 * @tag public
 * @throw 404 존재하지 않는 사용자인 경우
 * @throw 400 비밀번호가 일치하지 않거나 이메일 인증이 완료되지 않은 경우
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 로그인에 사용되는 이메일과 비밀번호를 포함한다
 * @returns access_token 전달, 해당 토큰은 쿠키에도 저장됨
 * 
 * @controller AuthController.signIn()
 * @path POST /auth/sign-in
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function signIn
    (
        connection: IConnection,
        body: IAuthUsecase.SignIn
    ): Promise<signIn.Output>
{
    return Fetcher.fetch
    (
        connection,
        signIn.ENCRYPTED,
        signIn.METHOD,
        signIn.path(),
        body,
        signIn.stringify
    );
}
export namespace signIn
{
    export type Input = IAuthUsecase.SignIn;
    export type Output = __object;

    export const METHOD = "POST" as const;
    export const PATH: string = "/auth/sign-in";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/auth/sign-in`;
    }
    export const stringify = (input: Input) => TSON.stringify(input);
}