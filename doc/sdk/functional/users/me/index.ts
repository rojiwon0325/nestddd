/**
 * @packageDocumentation
 * @module api.functional.users.me
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "nestia-fetcher";
import type { IConnection } from "nestia-fetcher";
import TSON from "typescript-json";

import type { User } from "./../../../../../src/api/user/domain/index";
import type { IUserUsecase } from "./../../../../../src/api/user/application/port/user.usecase.port";
import type { __type } from "./../../../../../src/api/user/presentation/web/user.controller";

/**
 * 내 정보 보기 API
 * 
 * @tag user
 * @returns 사용자 상세 프로필 정보
 * @throw 404 사용자가 존재하지 않는 경우
 * 
 * @controller UserController.findMe()
 * @path GET /users/me
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function findMe
    (
        connection: IConnection
    ): Promise<findMe.Output>
{
    return Fetcher.fetch
    (
        connection,
        findMe.ENCRYPTED,
        findMe.METHOD,
        findMe.path()
    );
}
export namespace findMe
{
    export type Output = User.ProfileDetail;

    export const METHOD = "GET" as const;
    export const PATH: string = "/users/me";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/users/me`;
    }
}

/**
 * 내 프로필 정보 수정 API
 * 
 * @tag user
 * @param connection connection Information of the remote HTTP(s) server with headers (+encryption password)
 * @param body 변경할 정보만 포함
 * @returns 변경된 사용자 프로필 정보
 * 
 * @controller UserController.update()
 * @path PATCH /users/me
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function update
    (
        connection: IConnection,
        body: IUserUsecase.Update
    ): Promise<update.Output>
{
    return Fetcher.fetch
    (
        connection,
        update.ENCRYPTED,
        update.METHOD,
        update.path(),
        body,
        update.stringify
    );
}
export namespace update
{
    export type Input = IUserUsecase.Update;
    export type Output = User.ProfileDetail;

    export const METHOD = "PATCH" as const;
    export const PATH: string = "/users/me";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/users/me`;
    }
    export const stringify = (input: Input) => TSON.stringify(input);
}

/**
 * 내 계정 삭제 API
 * 
 * @tag user
 * @returns 삭제된 계정 id
 * 
 * @controller UserController.remove()
 * @path DELETE /users/me
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export function remove
    (
        connection: IConnection
    ): Promise<remove.Output>
{
    return Fetcher.fetch
    (
        connection,
        remove.ENCRYPTED,
        remove.METHOD,
        remove.path()
    );
}
export namespace remove
{
    export type Output = __type;

    export const METHOD = "DELETE" as const;
    export const PATH: string = "/users/me";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export function path(): string
    {
        return `/users/me`;
    }
}